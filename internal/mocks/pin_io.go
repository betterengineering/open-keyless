// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/mspicer/go/src/periph.io/x/periph/conn/gpio/gpio.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	gpio "periph.io/x/periph/conn/gpio"
	physic "periph.io/x/periph/conn/physic"
)

// MockPinIn is a mock of PinIn interface
type MockPinIn struct {
	ctrl     *gomock.Controller
	recorder *MockPinInMockRecorder
}

// MockPinInMockRecorder is the mock recorder for MockPinIn
type MockPinInMockRecorder struct {
	mock *MockPinIn
}

// NewMockPinIn creates a new mock instance
func NewMockPinIn(ctrl *gomock.Controller) *MockPinIn {
	mock := &MockPinIn{ctrl: ctrl}
	mock.recorder = &MockPinInMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPinIn) EXPECT() *MockPinInMockRecorder {
	return m.recorder
}

// String mocks base method
func (m *MockPinIn) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String
func (mr *MockPinInMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockPinIn)(nil).String))
}

// Halt mocks base method
func (m *MockPinIn) Halt() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Halt")
	ret0, _ := ret[0].(error)
	return ret0
}

// Halt indicates an expected call of Halt
func (mr *MockPinInMockRecorder) Halt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Halt", reflect.TypeOf((*MockPinIn)(nil).Halt))
}

// Name mocks base method
func (m *MockPinIn) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockPinInMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockPinIn)(nil).Name))
}

// Number mocks base method
func (m *MockPinIn) Number() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Number")
	ret0, _ := ret[0].(int)
	return ret0
}

// Number indicates an expected call of Number
func (mr *MockPinInMockRecorder) Number() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Number", reflect.TypeOf((*MockPinIn)(nil).Number))
}

// Function mocks base method
func (m *MockPinIn) Function() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Function")
	ret0, _ := ret[0].(string)
	return ret0
}

// Function indicates an expected call of Function
func (mr *MockPinInMockRecorder) Function() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Function", reflect.TypeOf((*MockPinIn)(nil).Function))
}

// In mocks base method
func (m *MockPinIn) In(pull gpio.Pull, edge gpio.Edge) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "In", pull, edge)
	ret0, _ := ret[0].(error)
	return ret0
}

// In indicates an expected call of In
func (mr *MockPinInMockRecorder) In(pull, edge interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "In", reflect.TypeOf((*MockPinIn)(nil).In), pull, edge)
}

// Read mocks base method
func (m *MockPinIn) Read() gpio.Level {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read")
	ret0, _ := ret[0].(gpio.Level)
	return ret0
}

// Read indicates an expected call of Read
func (mr *MockPinInMockRecorder) Read() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockPinIn)(nil).Read))
}

// WaitForEdge mocks base method
func (m *MockPinIn) WaitForEdge(timeout time.Duration) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForEdge", timeout)
	ret0, _ := ret[0].(bool)
	return ret0
}

// WaitForEdge indicates an expected call of WaitForEdge
func (mr *MockPinInMockRecorder) WaitForEdge(timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForEdge", reflect.TypeOf((*MockPinIn)(nil).WaitForEdge), timeout)
}

// Pull mocks base method
func (m *MockPinIn) Pull() gpio.Pull {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pull")
	ret0, _ := ret[0].(gpio.Pull)
	return ret0
}

// Pull indicates an expected call of Pull
func (mr *MockPinInMockRecorder) Pull() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pull", reflect.TypeOf((*MockPinIn)(nil).Pull))
}

// DefaultPull mocks base method
func (m *MockPinIn) DefaultPull() gpio.Pull {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DefaultPull")
	ret0, _ := ret[0].(gpio.Pull)
	return ret0
}

// DefaultPull indicates an expected call of DefaultPull
func (mr *MockPinInMockRecorder) DefaultPull() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultPull", reflect.TypeOf((*MockPinIn)(nil).DefaultPull))
}

// MockPinOut is a mock of PinOut interface
type MockPinOut struct {
	ctrl     *gomock.Controller
	recorder *MockPinOutMockRecorder
}

// MockPinOutMockRecorder is the mock recorder for MockPinOut
type MockPinOutMockRecorder struct {
	mock *MockPinOut
}

// NewMockPinOut creates a new mock instance
func NewMockPinOut(ctrl *gomock.Controller) *MockPinOut {
	mock := &MockPinOut{ctrl: ctrl}
	mock.recorder = &MockPinOutMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPinOut) EXPECT() *MockPinOutMockRecorder {
	return m.recorder
}

// String mocks base method
func (m *MockPinOut) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String
func (mr *MockPinOutMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockPinOut)(nil).String))
}

// Halt mocks base method
func (m *MockPinOut) Halt() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Halt")
	ret0, _ := ret[0].(error)
	return ret0
}

// Halt indicates an expected call of Halt
func (mr *MockPinOutMockRecorder) Halt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Halt", reflect.TypeOf((*MockPinOut)(nil).Halt))
}

// Name mocks base method
func (m *MockPinOut) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockPinOutMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockPinOut)(nil).Name))
}

// Number mocks base method
func (m *MockPinOut) Number() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Number")
	ret0, _ := ret[0].(int)
	return ret0
}

// Number indicates an expected call of Number
func (mr *MockPinOutMockRecorder) Number() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Number", reflect.TypeOf((*MockPinOut)(nil).Number))
}

// Function mocks base method
func (m *MockPinOut) Function() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Function")
	ret0, _ := ret[0].(string)
	return ret0
}

// Function indicates an expected call of Function
func (mr *MockPinOutMockRecorder) Function() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Function", reflect.TypeOf((*MockPinOut)(nil).Function))
}

// Out mocks base method
func (m *MockPinOut) Out(l gpio.Level) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Out", l)
	ret0, _ := ret[0].(error)
	return ret0
}

// Out indicates an expected call of Out
func (mr *MockPinOutMockRecorder) Out(l interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Out", reflect.TypeOf((*MockPinOut)(nil).Out), l)
}

// PWM mocks base method
func (m *MockPinOut) PWM(duty gpio.Duty, f physic.Frequency) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PWM", duty, f)
	ret0, _ := ret[0].(error)
	return ret0
}

// PWM indicates an expected call of PWM
func (mr *MockPinOutMockRecorder) PWM(duty, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PWM", reflect.TypeOf((*MockPinOut)(nil).PWM), duty, f)
}

// MockPinIO is a mock of PinIO interface
type MockPinIO struct {
	ctrl     *gomock.Controller
	recorder *MockPinIOMockRecorder
}

// MockPinIOMockRecorder is the mock recorder for MockPinIO
type MockPinIOMockRecorder struct {
	mock *MockPinIO
}

// NewMockPinIO creates a new mock instance
func NewMockPinIO(ctrl *gomock.Controller) *MockPinIO {
	mock := &MockPinIO{ctrl: ctrl}
	mock.recorder = &MockPinIOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPinIO) EXPECT() *MockPinIOMockRecorder {
	return m.recorder
}

// String mocks base method
func (m *MockPinIO) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String
func (mr *MockPinIOMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockPinIO)(nil).String))
}

// Halt mocks base method
func (m *MockPinIO) Halt() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Halt")
	ret0, _ := ret[0].(error)
	return ret0
}

// Halt indicates an expected call of Halt
func (mr *MockPinIOMockRecorder) Halt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Halt", reflect.TypeOf((*MockPinIO)(nil).Halt))
}

// Name mocks base method
func (m *MockPinIO) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockPinIOMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockPinIO)(nil).Name))
}

// Number mocks base method
func (m *MockPinIO) Number() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Number")
	ret0, _ := ret[0].(int)
	return ret0
}

// Number indicates an expected call of Number
func (mr *MockPinIOMockRecorder) Number() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Number", reflect.TypeOf((*MockPinIO)(nil).Number))
}

// Function mocks base method
func (m *MockPinIO) Function() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Function")
	ret0, _ := ret[0].(string)
	return ret0
}

// Function indicates an expected call of Function
func (mr *MockPinIOMockRecorder) Function() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Function", reflect.TypeOf((*MockPinIO)(nil).Function))
}

// In mocks base method
func (m *MockPinIO) In(pull gpio.Pull, edge gpio.Edge) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "In", pull, edge)
	ret0, _ := ret[0].(error)
	return ret0
}

// In indicates an expected call of In
func (mr *MockPinIOMockRecorder) In(pull, edge interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "In", reflect.TypeOf((*MockPinIO)(nil).In), pull, edge)
}

// Read mocks base method
func (m *MockPinIO) Read() gpio.Level {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read")
	ret0, _ := ret[0].(gpio.Level)
	return ret0
}

// Read indicates an expected call of Read
func (mr *MockPinIOMockRecorder) Read() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockPinIO)(nil).Read))
}

// WaitForEdge mocks base method
func (m *MockPinIO) WaitForEdge(timeout time.Duration) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForEdge", timeout)
	ret0, _ := ret[0].(bool)
	return ret0
}

// WaitForEdge indicates an expected call of WaitForEdge
func (mr *MockPinIOMockRecorder) WaitForEdge(timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForEdge", reflect.TypeOf((*MockPinIO)(nil).WaitForEdge), timeout)
}

// Pull mocks base method
func (m *MockPinIO) Pull() gpio.Pull {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pull")
	ret0, _ := ret[0].(gpio.Pull)
	return ret0
}

// Pull indicates an expected call of Pull
func (mr *MockPinIOMockRecorder) Pull() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pull", reflect.TypeOf((*MockPinIO)(nil).Pull))
}

// DefaultPull mocks base method
func (m *MockPinIO) DefaultPull() gpio.Pull {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DefaultPull")
	ret0, _ := ret[0].(gpio.Pull)
	return ret0
}

// DefaultPull indicates an expected call of DefaultPull
func (mr *MockPinIOMockRecorder) DefaultPull() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultPull", reflect.TypeOf((*MockPinIO)(nil).DefaultPull))
}

// Out mocks base method
func (m *MockPinIO) Out(l gpio.Level) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Out", l)
	ret0, _ := ret[0].(error)
	return ret0
}

// Out indicates an expected call of Out
func (mr *MockPinIOMockRecorder) Out(l interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Out", reflect.TypeOf((*MockPinIO)(nil).Out), l)
}

// PWM mocks base method
func (m *MockPinIO) PWM(duty gpio.Duty, f physic.Frequency) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PWM", duty, f)
	ret0, _ := ret[0].(error)
	return ret0
}

// PWM indicates an expected call of PWM
func (mr *MockPinIOMockRecorder) PWM(duty, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PWM", reflect.TypeOf((*MockPinIO)(nil).PWM), duty, f)
}

// MockRealPin is a mock of RealPin interface
type MockRealPin struct {
	ctrl     *gomock.Controller
	recorder *MockRealPinMockRecorder
}

// MockRealPinMockRecorder is the mock recorder for MockRealPin
type MockRealPinMockRecorder struct {
	mock *MockRealPin
}

// NewMockRealPin creates a new mock instance
func NewMockRealPin(ctrl *gomock.Controller) *MockRealPin {
	mock := &MockRealPin{ctrl: ctrl}
	mock.recorder = &MockRealPinMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRealPin) EXPECT() *MockRealPinMockRecorder {
	return m.recorder
}

// Real mocks base method
func (m *MockRealPin) Real() gpio.PinIO {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Real")
	ret0, _ := ret[0].(gpio.PinIO)
	return ret0
}

// Real indicates an expected call of Real
func (mr *MockRealPinMockRecorder) Real() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Real", reflect.TypeOf((*MockRealPin)(nil).Real))
}
