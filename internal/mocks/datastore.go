// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/datastore/datastore.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	datastore "github.com/lodge93/open-keyless/pkg/datastore"
	reflect "reflect"
)

// MockDatastore is a mock of Datastore interface
type MockDatastore struct {
	ctrl     *gomock.Controller
	recorder *MockDatastoreMockRecorder
}

// MockDatastoreMockRecorder is the mock recorder for MockDatastore
type MockDatastoreMockRecorder struct {
	mock *MockDatastore
}

// NewMockDatastore creates a new mock instance
func NewMockDatastore(ctrl *gomock.Controller) *MockDatastore {
	mock := &MockDatastore{ctrl: ctrl}
	mock.recorder = &MockDatastoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDatastore) EXPECT() *MockDatastoreMockRecorder {
	return m.recorder
}

// HasAccess mocks base method
func (m *MockDatastore) HasAccess(id string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasAccess", id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasAccess indicates an expected call of HasAccess
func (mr *MockDatastoreMockRecorder) HasAccess(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasAccess", reflect.TypeOf((*MockDatastore)(nil).HasAccess), id)
}

// ListBadges mocks base method
func (m *MockDatastore) ListBadges() ([]datastore.Badge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBadges")
	ret0, _ := ret[0].([]datastore.Badge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBadges indicates an expected call of ListBadges
func (mr *MockDatastoreMockRecorder) ListBadges() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBadges", reflect.TypeOf((*MockDatastore)(nil).ListBadges))
}

// CreateBadge mocks base method
func (m *MockDatastore) CreateBadge(id, badgeType string, enabled bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBadge", id, badgeType, enabled)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBadge indicates an expected call of CreateBadge
func (mr *MockDatastoreMockRecorder) CreateBadge(id, badgeType, enabled interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBadge", reflect.TypeOf((*MockDatastore)(nil).CreateBadge), id, badgeType, enabled)
}

// EnableBadge mocks base method
func (m *MockDatastore) EnableBadge(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableBadge", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnableBadge indicates an expected call of EnableBadge
func (mr *MockDatastoreMockRecorder) EnableBadge(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableBadge", reflect.TypeOf((*MockDatastore)(nil).EnableBadge), id)
}

// DisableBadge mocks base method
func (m *MockDatastore) DisableBadge(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableBadge", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DisableBadge indicates an expected call of DisableBadge
func (mr *MockDatastoreMockRecorder) DisableBadge(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableBadge", reflect.TypeOf((*MockDatastore)(nil).DisableBadge), id)
}

// DeleteBadge mocks base method
func (m *MockDatastore) DeleteBadge(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBadge", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBadge indicates an expected call of DeleteBadge
func (mr *MockDatastoreMockRecorder) DeleteBadge(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBadge", reflect.TypeOf((*MockDatastore)(nil).DeleteBadge), id)
}

// GetBadge mocks base method
func (m *MockDatastore) GetBadge(id string) (*datastore.Badge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBadge", id)
	ret0, _ := ret[0].(*datastore.Badge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBadge indicates an expected call of GetBadge
func (mr *MockDatastoreMockRecorder) GetBadge(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBadge", reflect.TypeOf((*MockDatastore)(nil).GetBadge), id)
}
