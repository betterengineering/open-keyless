// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/scanner/libnfc.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	nfc "github.com/fuzxxl/nfc/2.0/nfc"
	gomock "github.com/golang/mock/gomock"
)

// MockLibNFCDevice is a mock of LibNFCDevice interface
type MockLibNFCDevice struct {
	ctrl     *gomock.Controller
	recorder *MockLibNFCDeviceMockRecorder
}

// MockLibNFCDeviceMockRecorder is the mock recorder for MockLibNFCDevice
type MockLibNFCDeviceMockRecorder struct {
	mock *MockLibNFCDevice
}

// NewMockLibNFCDevice creates a new mock instance
func NewMockLibNFCDevice(ctrl *gomock.Controller) *MockLibNFCDevice {
	mock := &MockLibNFCDevice{ctrl: ctrl}
	mock.recorder = &MockLibNFCDeviceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLibNFCDevice) EXPECT() *MockLibNFCDeviceMockRecorder {
	return m.recorder
}

// InitiatorInit mocks base method
func (m *MockLibNFCDevice) InitiatorInit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitiatorInit")
	ret0, _ := ret[0].(error)
	return ret0
}

// InitiatorInit indicates an expected call of InitiatorInit
func (mr *MockLibNFCDeviceMockRecorder) InitiatorInit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitiatorInit", reflect.TypeOf((*MockLibNFCDevice)(nil).InitiatorInit))
}

// Close mocks base method
func (m *MockLibNFCDevice) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockLibNFCDeviceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockLibNFCDevice)(nil).Close))
}

// InitiatorListPassiveTargets mocks base method
func (m *MockLibNFCDevice) InitiatorListPassiveTargets(mod nfc.Modulation) ([]nfc.Target, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitiatorListPassiveTargets", mod)
	ret0, _ := ret[0].([]nfc.Target)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitiatorListPassiveTargets indicates an expected call of InitiatorListPassiveTargets
func (mr *MockLibNFCDeviceMockRecorder) InitiatorListPassiveTargets(mod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitiatorListPassiveTargets", reflect.TypeOf((*MockLibNFCDevice)(nil).InitiatorListPassiveTargets), mod)
}
